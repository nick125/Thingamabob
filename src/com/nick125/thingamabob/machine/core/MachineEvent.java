/*
 * Thingamabob - A Java-based Turing Machine Emulator
 * Copyright (c) 2010 Nicholas Kamper, Drew Hill, Travis Baumbaugh
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

package com.nick125.thingamabob.machine.core;

/**
 * An event generated by the machine
 *
 * @author kampernj. Created Oct 29, 2010.
 */
public class MachineEvent {
	// Event types
	/**
	 * Fired when the machine starts running.
	 */
	public static final int MACHINE_STATE_RUNNING = 2;
	/**
	 * Fired when the machine has halted
	 */
	public static final int MACHINE_STATE_HALTED = 4;
	/**
	 * Fired when the machine has thrown an error
	 */
	public static final int MACHINE_ERROR = 8;
	/**
	 * Fired when the machine performs an operation.
	 */
	public static final int MACHINE_OPERATION = 16;
	//
	private int eventType;
	private Object argument;

	/**
	 * Creates a new MachineEvent with the given event type
	 *
	 * @param eventType
	 */
	public MachineEvent(int eventType) {
		this(eventType, null);
	}

	/**
	 * Creates a new MachineEvent with the given event type and argument
	 *
	 * @param eventType
	 * @param argument
	 */
	public MachineEvent(int eventType, Object argument) {
		this.eventType = eventType;
		this.argument = argument;
	}

	/**
	 * Returns the value of the field called 'argument'.
	 *
	 * @return Returns the argument.
	 */
	public Object getArgument() {
		return this.argument;
	}

	/**
	 * Returns the value of the field called 'eventType'.
	 *
	 * @return Returns the eventType.
	 */
	public int getEventType() {
		return this.eventType;
	}
}
